{"meta":{"title":"Xie","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"","slug":"zuoye","date":"2020-09-06T03:05:09.462Z","updated":"2020-09-06T03:38:11.579Z","comments":true,"path":"2020/09/06/zuoye/","link":"","permalink":"http://example.com/2020/09/06/zuoye/","excerpt":"","text":"#茶、酒# 品茶，越品心越清；饮酒，越喝人越浓。 品茶，不同于吃茶，吃茶者的茶，大都粗粝，不讲究环境，在中国，牛饮居多，或为了提神，又或是职业习惯需要，开车久了，泡一杯浓菜，放在旁边，在车靠站或停边的空隙，呷上一口，以解渴。品茶者，除了必备的茶叶，茶具外，环境气氛的影响也是重要的因素之一。如不是在优雅别致的茶馆里，在家中有亲朋戚友来了也是未尝不可的。这天趁着空闲，来到朋友家中，朋友见有客远来，喜于眉梢地忙碌了起来，先转换了电视节目，调低了音量，播放了些轻柔的音乐衬托着，像摆酒席式的，搬移出成套茶具，上边有着各种名茶，接着忙于烧水、洗壶，温杯……，然后边拿着个长长的匙羹勺子挠出茶叶往相应泡惯的紫砂壶里塞，边说着哪些壶是专泡哪种的茶，那是养壶。除了茶和器具外，水本来也很重要，可在城市里，当然没有什么优质水可选，只得用桶装矿泉水代替。看着他边讲解着边洗出第一道茶末倒了，又洗了一遍，最后才一一筛进小杯，当作客的我们拿着烫手的小杯，在鼻前细闻，茶香入肺，心中郁积都顿时化去，小撮入口，清润而回甘，让人久久地停留在回味的香醇当中不能忘返。这时主人又在继续忙着冲第二道，看着主人家的忙，心中中隐隐地感觉着不忍，不过话也说回来，正是这些忙碌，也许便是品茶者中最大的乐趣之事。虽然自己也不是茶道之人，对于讲究的茶道，还未算得上入门，然而当茶缓缓地流入口里，渗满了心肺间，感觉身心是那么的舒心酣畅，聊起话来，大都能心平气和，越发清醒，评骘着世间凡人俗事，趣味也就越发的浓。 品酒，则由于没真正见识过，也就无从说起。而饮酒者，则常见，没有复杂的工序，随意性。大多是捉杯就口，一饮而尽，接着再倒满，愈喝愈急，情绪渐高昂起来，意气风发的，说起话来激动不已，或由此引起了争吵、动手等控制不了自己的事也是常有。对于我自己来说，如醉了则倒下睡去，不醒人事，呵呵。然而在古代文人时期，中国的诗词流传下来，多与酒沾上了关系，互相交织在一起，以饮酒来达到灵感境界，以此诗兴大发，留下了许多美文诗句，如李白，“古来圣贤皆寂莫，惟有饮者留其名。” 李清照《浣溪沙》中“莫许杯深琥珀浓，未成沈醉意先融，疏鈡已应晚来风。”等等。可以说，酒文化应该比茶文化早，且影响具大。 所以，我认为，酒为感性之物，以此触发意想不到的境界。茶则属心清智之物。呷上一口，嘴有余香；细品着，犹如看一本书，越发让人感受着清润而又甘醇，又或浸于茶香回荡，甘由中来的体会当中。但茶和酒，似乎又有着某种的共通点，都是一种休闲文化的体现，有的时候，甚至可以替代，唐代颜真卿《春夜啜茶联句》云：“泛花邀客坐，代饮引清言。”写的便是以茶代酒，敬奉客人的事。","categories":[],"tags":[]},{"title":"数据库","slug":"hello-stranger","date":"2020-09-06T02:32:24.000Z","updated":"2020-09-06T03:38:35.893Z","comments":true,"path":"2020/09/06/hello-stranger/","link":"","permalink":"http://example.com/2020/09/06/hello-stranger/","excerpt":"","text":"存储过程编写经验和优化措施 介绍：在数据库的开发过程中，经常会遇到复杂的业务逻辑和对数据库的操作，这个时候就会用SP来封装数据库操作。如果项目的SP较多，书写又没有一定的规范，将会影响以后的系统维护困难和大SP逻辑的难以理解，另外如果数据库的数据量大或者项目对SP的性能要求很，就会遇到优化的问题，否则速度有可能很慢，经过亲身经验，一个经过优化过的SP要比一个性能差的SP的效率甚至高几百倍。 内容： 1、开发人员如果用到其他库的Table或View，务必在当前库中建立View来实现跨库操作，最好不要直接使用“databse.dbo.table_name”，因为sp_depends不能显示出该SP所使用的跨库table或view，不方便校验。 2、开发人员在提交SP前，必须已经使用set showplan on分析过查询计划，做过自身的查询优化检查。 3、高程序运行效率，优化应用程序，在SP编写过程中应该注意以下几点： a) SQL的使用规范： i. 尽量避免大事务操作，慎用holdlock子句，提高系统并发能力。ii. 尽量避免反复访问同一张或几张表，尤其是数据量较大的表，可以考虑先根据条件提取数据到临时表中，然后再做连接。iii.尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该改写；如果使用了游标，就要尽量避免在游标循环中再进行表连接的操作。iv. 注意where字句写法，必须考虑语句顺序，应该根据索引顺序、范围大小来确定条件子句的前后顺序，尽可能的让字段顺序与索引顺序相一致，范围从大到小。v. 不要在where子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。vi. 尽量使用exists代替select count(1)来判断是否存在记录，count函数只有在统计表中所有行数时使用，而且count(1)比count(*)更有效率。vii.尽量使用“&gt;=”，不要使用“&gt;”。viii.注意一些or子句和union子句之间的替换ix.注意表之间连接的数据类型，避免不同类型数据之间的连接。x. 注意存储过程中参数和数据类型的关系。xi.注意insert、update操作的数据量，防止与其他应用冲突。如果数据量超过200个数据页面（400k），那么系统将会进行锁升级，页级锁会升级成表级锁。 b) 索引的使用规范：i. 索引的创建要与应用结合考虑，建议大的OLTP表不要超过6个索引。ii. 尽可能的使用索引字段作为查询条件，尤其是聚簇索引，必要时可以通过index index_name来强制指定索引iii.避免对大表查询时进行table scan，必要时考虑新建索引。iv. 在使用索引字段作为条件时，如果该索引是联合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用。v. 要注意索引的维护，周期性重建索引，重新编译存储过程。 c)tempdb的使用规范：i. 尽量避免使用distinct、order by、group by、having、join、cumpute，因为这些语句会加重tempdb的负担。ii. 避免频繁创建和删除临时表，减少系统表资源的消耗。iii.在新建临时表时，如果一次性插入数据量很大，那么可以使用select into代替create table，避免log，提高速度；如果数据量不大，为了缓和系统表的资源，建议先create table，然后insert。iv. 如果临时表的数据量较大，需要建立索引，那么应该将创建临时表和建立索引的过程放在单独一个子存储过程中，这样才能保证系统能够很好的使用到该临时表的索引。v. 如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先truncate table，然后drop table，这样可以避免系统表的较长时间锁定。vi. 慎用大的临时表与其他大表的连接查询和修改，减低系统表负担，因为这种操作会在一条语句中多次使用tempdb的系统表。 d)合理的算法使用：根据上面已提到的SQL优化技术和ASE Tuning手册中的SQL优化内容,结合实际应用,采用多种算法进行比较,以获得消耗资源最少、效率最高的方法。具体可用ASE调优命令：set statistics io on, set statistics time on , set showplan on 等。 全文索引——CONTAINS 语法我们通常在 WHERE 子句中使用 CONTAINS ，就象这样：SELECT * FROM table_name WHERE CONTAINS(fullText_column,’search contents’)。 我们通过例子来学习，假设有表 students，其中的 address 是全文本检索的列。 查询住址在北京的学生SELECT student_id,student_nameFROM studentsWHERE CONTAINS( address, ‘beijing’ )remark: beijing是一个单词，要用单引号括起来。 查询住址在河北省的学生SELECT student_id,student_nameFROM studentsWHERE CONTAINS( address, ‘“HEIBEI province”‘ )remark: HEBEI province是一个词组，在单引号里还要用双引号括起来。 查询住址在河北省或北京的学生SELECT student_id,student_nameFROM studentsWHERE CONTAINS( address, ‘“HEIBEI province” OR beijing’ )remark: 可以指定逻辑操作符(包括 AND ，AND NOT，OR )。 查询有 ‘南京路’ 字样的地址SELECT student_id,student_nameFROM studentsWHERE CONTAINS( address, ‘nanjing NEAR road’ )remark: 上面的查询将返回包含 ‘nanjing road’，’nanjing east road’，’nanjing west road’ 等字样的地址。 A NEAR B，就表示条件： A 靠近 B。 查询以 ‘湖’ 开头的地址SELECT student_id,student_nameFROM studentsWHERE CONTAINS( address, ‘“hu*”‘ )remark: 上面的查询将返回包含 ‘hubei’，’hunan’ 等字样的地址。 记住是 *，不是 %。 类似加权的查询SELECT student_id,student_nameFROM studentsWHERE CONTAINS( address, ‘ISABOUT (city weight (.8), county wright (.4))’ )remark: ISABOUT 是这种查询的关键字，weight 指定了一个介于 0~1之间的数，类似系数(我的理解)。表示不同条件有不同的侧重。 单词的多态查询SELECT student_id,student_nameFROM studentsWHERE CONTAINS( address, ‘FORMSOF (INFLECTIONAL,street)’ )remark: 查询将返回包含 ‘street’，’streets’等字样的地址。 对于动词将返回它的不同的时态，如：dry，将返回 dry，dried，drying 等等。","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-09-05T15:29:35.355Z","updated":"2020-09-05T15:29:35.355Z","comments":true,"path":"2020/09/05/hello-world/","link":"","permalink":"http://example.com/2020/09/05/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}